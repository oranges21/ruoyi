// clearfix 混合宏用于清除浮动元素的影响。
// 它通过在父元素后插入一个伪元素，并设置其样式来清除内部浮动元素对布局的影响。
@mixin clearfix {
  &:after {
    content: ""; // 创建一个空内容
    display: table; // 将伪元素作为表格显示，确保它占据整个父容器宽度
    clear: both; // 清除所有方向上的浮动
  }
}

// scrollBar 混合宏用于自定义滚动条的样式。
// 该混合宏可以应用于任何需要自定义滚动条样式的元素。
@mixin scrollBar {
  &::-webkit-scrollbar-track-piece { // 修改滚动条轨道部分的样式（适用于Webkit浏览器）
    background: #d3dce6; // 设置轨道背景颜色
  }

  &::-webkit-scrollbar { // 修改滚动条整体的宽度
    width: 6px; // 设置滚动条的宽度
  }

  &::-webkit-scrollbar-thumb { // 修改滚动条滑块的样式
    background: #99a9bf; // 设置滑块背景颜色
    border-radius: 20px; // 圆角处理滑块边缘
  }
}

// relative 混合宏用于将元素定位为相对定位，
// 并且设置宽高为100%，通常用于创建全尺寸的子元素。
@mixin relative {
  position: relative; // 设置元素为相对定位
  width: 100%; // 元素宽度为100%
  height: 100%; // 元素高度为100%
}

// pct 混合宏用于设置元素的宽度为给定百分比，
// 并将其水平居中。适用于需要根据父容器比例调整大小的元素。
@mixin pct($pct) {
  width: #{$pct}; // 设置元素宽度为传入的百分比值
  position: relative; // 设置元素为相对定位
  margin: 0 auto; // 自动计算左右外边距以实现水平居中
}

// triangle 混合宏用于生成CSS三角形，
// 可以指定三角形的宽度、高度、颜色和方向。
@mixin triangle($width, $height, $color, $direction) {
  $width: $width / 2; // 计算三角形底边的一半长度

  // 根据方向参数设置不同的边框样式来创建三角形
  @if $direction == up {
    border-bottom: $height solid $color; // 底边使用指定颜色和高度创建上指三角形
    border-left: $width solid transparent; // 左右两边透明，使底部边框形成三角形
    border-right: $width solid transparent;
  }

  @else if $direction == right {
    border-left: $height solid $color; // 左边使用指定颜色和高度创建右指三角形
    border-top: $width solid transparent; // 上下两边透明，使左边边框形成三角形
    border-bottom: $width solid transparent;
  }

  @else if $direction == down {
    border-top: $height solid $color; // 上边使用指定颜色和高度创建下指三角形
    border-left: $width solid transparent; // 左右两边透明，使顶部边框形成三角形
    border-right: $width solid transparent;
  }

  @else if $direction == left {
    border-right: $height solid $color; // 右边使用指定颜色和高度创建左指三角形
    border-top: $width solid transparent; // 上下两边透明，使右边边框形成三角形
    border-bottom: $width solid transparent;
  }

  // 所有情况下都保持宽高为0，以确保只有边框可见，形成三角形
  height: 0;
  width: 0;
}